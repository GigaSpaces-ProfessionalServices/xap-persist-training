<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:os-core="http://www.openspaces.org/schema/core" xmlns:os-jms="http://www.openspaces.org/schema/jms"
	xmlns:os-events="http://www.openspaces.org/schema/events"
	xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
	xmlns:os-sla="http://www.openspaces.org/schema/sla" xmlns:tx="http://www.springframework.org/schema/tx"

	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/10.0/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/10.0/events/openspaces-events.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/10.0/remoting/openspaces-remoting.xsd">


	<!-- ANNOTATION AND COMPONENT SCAN CONFIGURATION -->
	<!-- Enable scan for OpenSpaces and Spring components -->
	<context:component-scan base-package="com.c123.billbuddy.events" />
	<context:component-scan base-package="com.c123.billbuddy.remoting" />


<bean id="dataSource" destroy-method="close"
  class="org.apache.commons.dbcp.BasicDataSource">
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost:3306/jbillbuddy"/>
    <property name="username" value="root"/>
    <property name="password" value=""/>
    <property name="initialSize" value="3"/>
</bean>

	<!-- Hibernate SessionFactory bean. Uses the pooled data source to connect 
		to the database. -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="annotatedClasses">
			<list>
				<value>com.c123.billbuddy.model.Merchant</value>
				<value>com.c123.billbuddy.model.User</value>
				<value>com.c123.billbuddy.model.Payment</value>
				<value>com.c123.billbuddy.model.ProcessingFee</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.jdbc.batch_size">1</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	<!-- An external data source that will be responsible for persisting changes 
		done on the cluster that connects to this mirror using Hibernate. -->
	<bean id="hibernateSpaceDataSource" class="org.openspaces.persistency.hibernate.DefaultHibernateSpaceDataSourceFactoryBean">
	    <property name="sessionFactory" ref="sessionFactory"/>
		<!--  TODO -->
		<!--  Define the new property :  <property name=” augmentInitialLoadEntries”  set it to false. -->
		<!--  Add new property initialLoadQueryScanningBasePackages that enables scanning of packages that enable 
		custom initial loading. Fill in the list with one entry “com.c123.billbuddy.model” in order to scan the 
		change we have made to payments. -->
		
	</bean>
	
	
	<!-- Enables the usage of @GigaSpaceContext annotation based injection. -->
	<os-core:giga-space-context />
	
	<!-- Enables Spring Annotation configuration -->
	<context:annotation-config />
	
	<!-- Enables using @Polling and @Notify annotations -->
	<os-events:annotation-support />
	
	<!-- Enables using @RemotingService as well as @ExecutorProxy (and others) 
		annotations -->
	<os-remoting:annotation-support />
	
	<!-- Enables using @PreBackup, @PostBackup and other annotations -->
	<os-core:annotation-support />
	
	<!-- Transaction annotation support -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- SPACE CONFIGURATION -->
	<!-- A bean representing a space (an IJSpace implementation). -->
	<os-core:giga-space-late-context/>
	<os-core:space id="space" url="/./BillBuddy-space" mirror="true" schema="persistent" space-data-source="hibernateSpaceDataSource">
		<os-core:properties>
	        <props>
	            <!-- Use ALL IN CACHE -->
	            <prop key="space-config.engine.cache_policy">1</prop>
	            <prop key="space-config.external-data-source.usage">read-only</prop>
	            <prop key="cluster-config.cache-loader.external-data-source">true</prop>
	            <prop key="cluster-config.cache-loader.central-data-source">true</prop>
	        </props>
	    </os-core:properties>
	</os-core:space>
	<!-- OpenSpaces simplified space API built on top of IJSpace/JavaSpace. -->
	<os-core:giga-space id="gigaSpace" space="space"
		tx-manager="transactionManager"/>

	<!-- Defines a local Jini transaction manager. -->
	<os-core:distributed-tx-manager id="transactionManager" />
	
	<!-- Service exporter for exporting remote services -->
	<os-remoting:service-exporter id="serviceExporter" />
</beans>